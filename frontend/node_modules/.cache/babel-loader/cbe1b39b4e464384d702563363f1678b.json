{"ast":null,"code":"var _jsxFileName = \"/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/views/DashboardDefault/TeamTasks/TaskItem.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/styles';\nimport { ListItem, ListItemIcon, ListItemText, IconButton, Tooltip, colors } from '@material-ui/core';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport StackAvatars from 'src/components/StackAvatars';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  critical: {\n    '& $indicator': {\n      borderColor: colors.red[600]\n    }\n  },\n  indicator: {\n    height: 12,\n    width: 12,\n    borderWidth: 4,\n    borderStyle: 'solid',\n    borderColor: colors.grey[100],\n    borderRadius: '50%'\n  },\n  viewButton: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nfunction TaskItem({\n  task,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  let deadline = 'N/A';\n  let critical = false;\n\n  if (task.deadline) {\n    const now = moment();\n    const deadlineMoment = moment(task.deadline);\n\n    if (deadlineMoment.isAfter(now) && deadlineMoment.diff(now, 'day') < 3) {\n      deadline = `${deadlineMoment.diff(now, 'day')} days remaining`;\n      critical = true;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(ListItem, Object.assign({}, rest, {\n    className: clsx(classes.root, {\n      [classes.critical]: critical\n    }, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.indicator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    className: classes.listItemText,\n    primary: task.title,\n    primaryTypographyProps: {\n      variant: 'h6',\n      noWrap: true\n    },\n    secondary: deadline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StackAvatars, {\n    avatars: task.members,\n    limit: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"View task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.viewButton,\n    edge: \"end\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OpenInNewIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }))));\n}\n\nTaskItem.propTypes = {\n  className: PropTypes.string,\n  task: PropTypes.object.isRequired\n};\nexport default TaskItem;","map":{"version":3,"sources":["/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/views/DashboardDefault/TeamTasks/TaskItem.js"],"names":["React","PropTypes","clsx","moment","makeStyles","ListItem","ListItemIcon","ListItemText","IconButton","Tooltip","colors","OpenInNewIcon","StackAvatars","useStyles","theme","root","critical","borderColor","red","indicator","height","width","borderWidth","borderStyle","grey","borderRadius","viewButton","marginLeft","spacing","TaskItem","task","className","rest","classes","deadline","now","deadlineMoment","isAfter","diff","listItemText","title","variant","noWrap","members","propTypes","string","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  IconButton,\n  Tooltip,\n  colors\n} from '@material-ui/core';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport StackAvatars from 'src/components/StackAvatars';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  critical: {\n    '& $indicator': {\n      borderColor: colors.red[600]\n    }\n  },\n  indicator: {\n    height: 12,\n    width: 12,\n    borderWidth: 4,\n    borderStyle: 'solid',\n    borderColor: colors.grey[100],\n    borderRadius: '50%'\n  },\n  viewButton: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nfunction TaskItem({ task, className, ...rest }) {\n  const classes = useStyles();\n\n  let deadline = 'N/A';\n  let critical = false;\n\n  if (task.deadline) {\n    const now = moment();\n    const deadlineMoment = moment(task.deadline);\n\n    if (deadlineMoment.isAfter(now) && deadlineMoment.diff(now, 'day') < 3) {\n      deadline = `${deadlineMoment.diff(now, 'day')} days remaining`;\n      critical = true;\n    }\n  }\n\n  return (\n    <ListItem\n      {...rest}\n      className={clsx(\n        classes.root,\n        { [classes.critical]: critical },\n        className\n      )}\n    >\n      <ListItemIcon>\n        <span className={classes.indicator} />\n      </ListItemIcon>\n      <ListItemText\n        className={classes.listItemText}\n        primary={task.title}\n        primaryTypographyProps={{ variant: 'h6', noWrap: true }}\n        secondary={deadline}\n      />\n      <StackAvatars\n        avatars={task.members}\n        limit={3}\n      />\n      <Tooltip title=\"View task\">\n        <IconButton\n          className={classes.viewButton}\n          edge=\"end\"\n          size=\"small\"\n        >\n          <OpenInNewIcon />\n        </IconButton>\n      </Tooltip>\n    </ListItem>\n  );\n}\n\nTaskItem.propTypes = {\n  className: PropTypes.string,\n  task: PropTypes.object.isRequired\n};\n\nexport default TaskItem;\n"]},"metadata":{},"sourceType":"module"}