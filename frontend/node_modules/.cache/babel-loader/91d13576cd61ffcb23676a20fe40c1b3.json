{"ast":null,"code":"var _jsxFileName = \"/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/views/Login/LoginForm.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport validate from 'validate.js';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, TextField } from '@material-ui/core';\nimport { login } from 'src/actions';\nconst schema = {\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    email: true\n  },\n  password: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    }\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  fields: {\n    margin: theme.spacing(-1),\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      flexGrow: 1,\n      margin: theme.spacing(1)\n    }\n  },\n  submitButton: {\n    marginTop: theme.spacing(2),\n    width: '100%'\n  }\n}));\n\nfunction LoginForm({\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(prevFormState => ({ ...prevFormState,\n      values: { ...prevFormState.values,\n        [event.target.name]: event.target.type === 'checkbox' ? event.target.checked : event.target.value\n      },\n      touched: { ...prevFormState.touched,\n        [event.target.name]: true\n      }\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault(); // dispatch(login());\n\n    history.push('/');\n  };\n\n  const hasError = field => !!(formState.touched[field] && formState.errors[field]);\n\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(prevFormState => ({ ...prevFormState,\n      isValid: !errors,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n  return /*#__PURE__*/React.createElement(\"form\", Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    error: hasError('email'),\n    fullWidth: true,\n    helperText: hasError('email') ? formState.errors.email[0] : null,\n    label: \"Email address\",\n    name: \"email\",\n    onChange: handleChange,\n    value: formState.values.email || '',\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    error: hasError('password'),\n    fullWidth: true,\n    helperText: hasError('password') ? formState.errors.password[0] : null,\n    label: \"Password\",\n    name: \"password\",\n    onChange: handleChange,\n    type: \"password\",\n    value: formState.values.password || '',\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.submitButton,\n    color: \"secondary\",\n    disabled: !formState.isValid,\n    size: \"large\",\n    type: \"submit\",\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Sign in\"));\n}\n\nLoginForm.propTypes = {\n  className: PropTypes.string\n};\nexport default LoginForm;","map":{"version":3,"sources":["/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/views/Login/LoginForm.js"],"names":["React","useState","useEffect","useHistory","validate","clsx","PropTypes","useDispatch","makeStyles","Button","TextField","login","schema","email","presence","allowEmpty","message","password","useStyles","theme","root","fields","margin","spacing","display","flexWrap","flexGrow","submitButton","marginTop","width","LoginForm","className","rest","classes","history","dispatch","formState","setFormState","isValid","values","touched","errors","handleChange","event","persist","prevFormState","target","name","type","checked","value","handleSubmit","preventDefault","push","hasError","field","propTypes","string"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,mBAAlC;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,UAAU,EAAE,KAAd;AAAqBC,MAAAA,OAAO,EAAE;AAA9B,KADL;AAELH,IAAAA,KAAK,EAAE;AAFF,GADM;AAKbI,EAAAA,QAAQ,EAAE;AACRH,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,UAAU,EAAE,KAAd;AAAqBC,MAAAA,OAAO,EAAE;AAA9B;AADF;AALG,CAAf;AAUA,MAAME,SAAS,GAAGV,UAAU,CAAEW,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE,EADiC;AAEvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAC,CAAf,CADF;AAENC,IAAAA,OAAO,EAAE,MAFH;AAGNC,IAAAA,QAAQ,EAAE,MAHJ;AAIN,aAAS;AACPC,MAAAA,QAAQ,EAAE,CADH;AAEPJ,MAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AAFD;AAJH,GAF+B;AAWvCI,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAET,KAAK,CAACI,OAAN,CAAc,CAAd,CADC;AAEZM,IAAAA,KAAK,EAAE;AAFK;AAXyB,CAAZ,CAAD,CAA5B;;AAiBA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,SAAF;AAAa,KAAGC;AAAhB,CAAnB,EAA2C;AACzC,QAAMC,OAAO,GAAGf,SAAS,EAAzB;AACA,QAAMgB,OAAO,GAAG/B,UAAU,EAA1B;AACA,QAAMgC,QAAQ,GAAG5B,WAAW,EAA5B;AACA,QAAM,CAAC6B,SAAD,EAAYC,YAAZ,IAA4BpC,QAAQ,CAAC;AACzCqC,IAAAA,OAAO,EAAE,KADgC;AAEzCC,IAAAA,MAAM,EAAE,EAFiC;AAGzCC,IAAAA,OAAO,EAAE,EAHgC;AAIzCC,IAAAA,MAAM,EAAE;AAJiC,GAAD,CAA1C;;AAOA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,OAAN;AAEAP,IAAAA,YAAY,CAAEQ,aAAD,KAAoB,EAC/B,GAAGA,aAD4B;AAE/BN,MAAAA,MAAM,EAAE,EACN,GAAGM,aAAa,CAACN,MADX;AAEN,SAACI,KAAK,CAACG,MAAN,CAAaC,IAAd,GACEJ,KAAK,CAACG,MAAN,CAAaE,IAAb,KAAsB,UAAtB,GACIL,KAAK,CAACG,MAAN,CAAaG,OADjB,GAEIN,KAAK,CAACG,MAAN,CAAaI;AALb,OAFuB;AAS/BV,MAAAA,OAAO,EAAE,EACP,GAAGK,aAAa,CAACL,OADV;AAEP,SAACG,KAAK,CAACG,MAAN,CAAaC,IAAd,GAAqB;AAFd;AATsB,KAApB,CAAD,CAAZ;AAcD,GAjBD;;AAmBA,QAAMI,YAAY,GAAG,MAAOR,KAAP,IAAiB;AACpCA,IAAAA,KAAK,CAACS,cAAN,GADoC,CAEpC;;AACAlB,IAAAA,OAAO,CAACmB,IAAR,CAAa,GAAb;AACD,GAJD;;AAMA,QAAMC,QAAQ,GAAIC,KAAD,IAAY,CAAC,EAAEnB,SAAS,CAACI,OAAV,CAAkBe,KAAlB,KAA4BnB,SAAS,CAACK,MAAV,CAAiBc,KAAjB,CAA9B,CAA9B;;AAEArD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuC,MAAM,GAAGrC,QAAQ,CAACgC,SAAS,CAACG,MAAX,EAAmB3B,MAAnB,CAAvB;AAEAyB,IAAAA,YAAY,CAAEQ,aAAD,KAAoB,EAC/B,GAAGA,aAD4B;AAE/BP,MAAAA,OAAO,EAAE,CAACG,MAFqB;AAG/BA,MAAAA,MAAM,EAAEA,MAAM,IAAI;AAHa,KAApB,CAAD,CAAZ;AAKD,GARQ,EAQN,CAACL,SAAS,CAACG,MAAX,CARM,CAAT;AAUA,sBACE,8CACMP,IADN;AAEE,IAAA,SAAS,EAAE3B,IAAI,CAAC4B,OAAO,CAACb,IAAT,EAAeW,SAAf,CAFjB;AAGE,IAAA,QAAQ,EAAEoB,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKE;AAAK,IAAA,SAAS,EAAElB,OAAO,CAACZ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEiC,QAAQ,CAAC,OAAD,CADjB;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,UAAU,EAAEA,QAAQ,CAAC,OAAD,CAAR,GAAoBlB,SAAS,CAACK,MAAV,CAAiB5B,KAAjB,CAAuB,CAAvB,CAApB,GAAgD,IAH9D;AAIE,IAAA,KAAK,EAAC,eAJR;AAKE,IAAA,IAAI,EAAC,OALP;AAME,IAAA,QAAQ,EAAE6B,YANZ;AAOE,IAAA,KAAK,EAAEN,SAAS,CAACG,MAAV,CAAiB1B,KAAjB,IAA0B,EAPnC;AAQE,IAAA,OAAO,EAAC,UARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEyC,QAAQ,CAAC,UAAD,CADjB;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,UAAU,EACRA,QAAQ,CAAC,UAAD,CAAR,GAAuBlB,SAAS,CAACK,MAAV,CAAiBxB,QAAjB,CAA0B,CAA1B,CAAvB,GAAsD,IAJ1D;AAME,IAAA,KAAK,EAAC,UANR;AAOE,IAAA,IAAI,EAAC,UAPP;AAQE,IAAA,QAAQ,EAAEyB,YARZ;AASE,IAAA,IAAI,EAAC,UATP;AAUE,IAAA,KAAK,EAAEN,SAAS,CAACG,MAAV,CAAiBtB,QAAjB,IAA6B,EAVtC;AAWE,IAAA,OAAO,EAAC,UAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CALF,eA8BE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAEgB,OAAO,CAACN,YADrB;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,QAAQ,EAAE,CAACS,SAAS,CAACE,OAHvB;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,IAAI,EAAC,QALP;AAME,IAAA,OAAO,EAAC,WANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA9BF,CADF;AA2CD;;AAEDR,SAAS,CAAC0B,SAAV,GAAsB;AACpBzB,EAAAA,SAAS,EAAEzB,SAAS,CAACmD;AADD,CAAtB;AAIA,eAAe3B,SAAf","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport validate from 'validate.js';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, TextField } from '@material-ui/core';\nimport { login } from 'src/actions';\n\nconst schema = {\n  email: {\n    presence: { allowEmpty: false, message: 'is required' },\n    email: true\n  },\n  password: {\n    presence: { allowEmpty: false, message: 'is required' }\n  }\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  fields: {\n    margin: theme.spacing(-1),\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      flexGrow: 1,\n      margin: theme.spacing(1)\n    }\n  },\n  submitButton: {\n    marginTop: theme.spacing(2),\n    width: '100%'\n  }\n}));\n\nfunction LoginForm({ className, ...rest }) {\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n\n  const handleChange = (event) => {\n    event.persist();\n\n    setFormState((prevFormState) => ({\n      ...prevFormState,\n      values: {\n        ...prevFormState.values,\n        [event.target.name]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value\n      },\n      touched: {\n        ...prevFormState.touched,\n        [event.target.name]: true\n      }\n    }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // dispatch(login());\n    history.push('/');\n  };\n\n  const hasError = (field) => (!!(formState.touched[field] && formState.errors[field]));\n\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n\n    setFormState((prevFormState) => ({\n      ...prevFormState,\n      isValid: !errors,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  return (\n    <form\n      {...rest}\n      className={clsx(classes.root, className)}\n      onSubmit={handleSubmit}\n    >\n      <div className={classes.fields}>\n        <TextField\n          error={hasError('email')}\n          fullWidth\n          helperText={hasError('email') ? formState.errors.email[0] : null}\n          label=\"Email address\"\n          name=\"email\"\n          onChange={handleChange}\n          value={formState.values.email || ''}\n          variant=\"outlined\"\n        />\n        <TextField\n          error={hasError('password')}\n          fullWidth\n          helperText={\n            hasError('password') ? formState.errors.password[0] : null\n          }\n          label=\"Password\"\n          name=\"password\"\n          onChange={handleChange}\n          type=\"password\"\n          value={formState.values.password || ''}\n          variant=\"outlined\"\n        />\n      </div>\n      <Button\n        className={classes.submitButton}\n        color=\"secondary\"\n        disabled={!formState.isValid}\n        size=\"large\"\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Sign in\n      </Button>\n    </form>\n  );\n}\n\nLoginForm.propTypes = {\n  className: PropTypes.string\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}