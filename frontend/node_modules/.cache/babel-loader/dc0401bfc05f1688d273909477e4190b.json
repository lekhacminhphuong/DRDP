{"ast":null,"code":"var _jsxFileName = \"/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/views/Overview/Projects.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography, Button } from '@material-ui/core';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport axios from 'src/utils/axios';\nimport ProjectCard from 'src/components/ProjectCard';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(2)\n  },\n  title: {\n    position: 'relative',\n    '&:before': {\n      position: 'absolute',\n      bottom: -8,\n      left: 0,\n      content: '\" \"',\n      height: 3,\n      width: 48,\n      backgroundColor: theme.palette.primary.main\n    }\n  },\n  arrowIcon: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nfunction Projects({\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchProjects = () => {\n      axios.get('/api/account/projects').then(response => {\n        if (mounted) {\n          setProjects(response.data.projects);\n        }\n      });\n    };\n\n    fetchProjects();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Active Projects\"), /*#__PURE__*/React.createElement(Button, {\n    component: RouterLink,\n    to: \"/profile/user/projects\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"See all\", /*#__PURE__*/React.createElement(KeyboardArrowRightIcon, {\n    className: classes.arrowIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }))), projects.map(project => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: project.id,\n    project: project,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  })));\n}\n\nProjects.propTypes = {\n  className: PropTypes.string\n};\nexport default Projects;","map":{"version":3,"sources":["/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/views/Overview/Projects.js"],"names":["React","useState","useEffect","Link","RouterLink","PropTypes","clsx","makeStyles","Typography","Button","KeyboardArrowRightIcon","axios","ProjectCard","useStyles","theme","root","header","display","alignItems","justifyContent","marginBottom","spacing","title","position","bottom","left","content","height","width","backgroundColor","palette","primary","main","arrowIcon","marginLeft","Projects","className","rest","classes","projects","setProjects","mounted","fetchProjects","get","then","response","data","map","project","id","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography, Button } from '@material-ui/core';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport axios from 'src/utils/axios';\nimport ProjectCard from 'src/components/ProjectCard';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(2)\n  },\n  title: {\n    position: 'relative',\n    '&:before': {\n      position: 'absolute',\n      bottom: -8,\n      left: 0,\n      content: '\" \"',\n      height: 3,\n      width: 48,\n      backgroundColor: theme.palette.primary.main\n    }\n  },\n  arrowIcon: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nfunction Projects({ className, ...rest }) {\n  const classes = useStyles();\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchProjects = () => {\n      axios.get('/api/account/projects').then((response) => {\n        if (mounted) {\n          setProjects(response.data.projects);\n        }\n      });\n    };\n\n    fetchProjects();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <div className={classes.header}>\n        <Typography\n          className={classes.title}\n          variant=\"h5\"\n        >\n          Active Projects\n        </Typography>\n        <Button\n          component={RouterLink}\n          to=\"/profile/user/projects\"\n        >\n          See all\n          <KeyboardArrowRightIcon className={classes.arrowIcon} />\n        </Button>\n      </div>\n      {projects.map((project) => (\n        <ProjectCard\n          key={project.id}\n          project={project}\n        />\n      ))}\n    </div>\n  );\n}\n\nProjects.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Projects;\n"]},"metadata":{},"sourceType":"module"}