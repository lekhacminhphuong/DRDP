{"ast":null,"code":"var _jsxFileName = \"/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/components/Label.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography, colors } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexGrow: 0,\n    flexShrink: 0,\n    borderRadius: 2,\n    lineHeight: '10px',\n    fontSize: '10px',\n    height: 20,\n    minWidth: 20,\n    whiteSpace: 'nowrap',\n    padding: theme.spacing(0.5, 1)\n  },\n  rounded: {\n    borderRadius: 10,\n    padding: theme.spacing(0.5)\n  }\n}));\n\nfunction Label({\n  className,\n  variant,\n  color,\n  shape,\n  children,\n  style,\n  ...rest\n}) {\n  const classes = useStyles();\n  const rootClassName = clsx({\n    [classes.root]: true,\n    [classes.rounded]: shape === 'rounded'\n  }, className);\n  const finalStyle = { ...style\n  };\n\n  if (variant === 'contained') {\n    finalStyle.backgroundColor = color;\n    finalStyle.color = '#FFF';\n  } else {\n    finalStyle.border = `1px solid ${color}`;\n    finalStyle.color = color;\n  }\n\n  return /*#__PURE__*/React.createElement(Typography, Object.assign({}, rest, {\n    className: rootClassName,\n    style: finalStyle,\n    variant: \"overline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }), children);\n}\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  shape: PropTypes.oneOf(['square', 'rounded']),\n  style: PropTypes.object,\n  variant: PropTypes.oneOf(['contained', 'outlined'])\n};\nLabel.defaultProps = {\n  style: {},\n  color: colors.grey[600],\n  variant: 'contained',\n  shape: 'square'\n};\nexport default Label;","map":{"version":3,"sources":["/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/components/Label.js"],"names":["React","PropTypes","clsx","makeStyles","Typography","colors","useStyles","theme","root","display","alignItems","justifyContent","flexGrow","flexShrink","borderRadius","lineHeight","fontSize","height","minWidth","whiteSpace","padding","spacing","rounded","Label","className","variant","color","shape","children","style","rest","classes","rootClassName","finalStyle","backgroundColor","border","propTypes","node","string","oneOf","object","defaultProps","grey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography, colors } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexGrow: 0,\n    flexShrink: 0,\n    borderRadius: 2,\n    lineHeight: '10px',\n    fontSize: '10px',\n    height: 20,\n    minWidth: 20,\n    whiteSpace: 'nowrap',\n    padding: theme.spacing(0.5, 1)\n  },\n  rounded: {\n    borderRadius: 10,\n    padding: theme.spacing(0.5)\n  }\n}));\n\nfunction Label({\n  className,\n  variant,\n  color,\n  shape,\n  children,\n  style,\n  ...rest\n}) {\n  const classes = useStyles();\n  const rootClassName = clsx(\n    {\n      [classes.root]: true,\n      [classes.rounded]: shape === 'rounded'\n    },\n    className\n  );\n  const finalStyle = { ...style };\n\n  if (variant === 'contained') {\n    finalStyle.backgroundColor = color;\n    finalStyle.color = '#FFF';\n  } else {\n    finalStyle.border = `1px solid ${color}`;\n    finalStyle.color = color;\n  }\n\n  return (\n    <Typography\n      {...rest}\n      className={rootClassName}\n      style={finalStyle}\n      variant=\"overline\"\n    >\n      {children}\n    </Typography>\n  );\n}\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  shape: PropTypes.oneOf(['square', 'rounded']),\n  style: PropTypes.object,\n  variant: PropTypes.oneOf(['contained', 'outlined'])\n};\n\nLabel.defaultProps = {\n  style: {},\n  color: colors.grey[600],\n  variant: 'contained',\n  shape: 'square'\n};\n\nexport default Label;\n"]},"metadata":{},"sourceType":"module"}