{"ast":null,"code":"var _jsxFileName = \"/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/components/RichEditor/index.js\";\nimport React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Editor, EditorState, RichUtils, Modifier, getDefaultKeyBinding } from 'draft-js';\nimport { makeStyles } from '@material-ui/styles';\nimport { Paper, Divider } from '@material-ui/core';\nimport EditorToolbar from './EditorToolbar';\nimport { blockRenderMap } from './block';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  editorContainer: {\n    padding: theme.spacing(2),\n    minHeight: 400,\n    '&:focus': {\n      outline: 'none'\n    },\n    '& .public-DraftEditorPlaceholder-root': { ...theme.typography.body2\n    },\n    '& .public-DraftEditorPlaceholder-hasFocus': {\n      display: 'none'\n    },\n    '& .public-DraftEditor-content': { ...theme.typography.body1,\n      '& h1': { ...theme.typography.h1\n      },\n      '& h2': { ...theme.typography.h2\n      },\n      '& h3': { ...theme.typography.h3\n      },\n      '& h4': { ...theme.typography.h4\n      },\n      '& h5': { ...theme.typography.h5\n      },\n      '& h6': { ...theme.typography.h6\n      },\n      '& blockquote': { ...theme.typography.subtitle1\n      },\n      '& ul': { ...theme.typography.body1,\n        marginLeft: theme.spacing(4)\n      },\n      '& ol': { ...theme.typography.body1,\n        marginLeft: theme.spacing(4)\n      },\n      '& pre': {\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n        fontSize: 16,\n        padding: 2\n      }\n    }\n  },\n  textAlignLeft: {\n    textAlign: 'left'\n  },\n  textAlignCenter: {\n    textAlign: 'center'\n  },\n  textAlignRight: {\n    textAlign: 'right'\n  },\n  textAlignJustify: {\n    textAlign: 'justify'\n  }\n}));\n\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nfunction RichEditor({\n  placeholder,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const editorRef = useRef(null);\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const handleContainerClick = () => {\n    editorRef.current.focus();\n  };\n\n  const handleToolbarToggle = (type, value) => {\n    if (type === 'blockType') {\n      if (['left', 'center', 'right', 'justify'].includes(value)) {\n        const newContentState = Modifier.setBlockData(editorState.getCurrentContent(), editorState.getSelection(), {\n          'text-align': value\n        });\n        const newEditorState = EditorState.push(editorState, newContentState, 'change-block-data');\n        setEditorState(newEditorState);\n        return;\n      }\n\n      setEditorState(RichUtils.toggleBlockType(editorState, value));\n    } else {\n      setEditorState(RichUtils.toggleInlineStyle(editorState, value));\n    }\n  };\n\n  const handleEditorChange = newState => {\n    setEditorState(newState);\n  };\n\n  const handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      handleEditorChange(newState);\n      return true;\n    }\n\n    return false;\n  };\n\n  const mapKeyToEditorCommand = event => {\n    if (event.keyCode === 9) {\n      const newEditorState = RichUtils.onTab(event, editorState, 4);\n\n      if (newEditorState !== editorState) {\n        handleEditorChange(newEditorState);\n      }\n\n      return;\n    }\n\n    return getDefaultKeyBinding(event);\n  };\n\n  const blockStyleFn = contentBlock => {\n    const textAlign = contentBlock.getData().get('text-align');\n\n    if (textAlign) {\n      return classes[`textAlign${capitalize(textAlign)}`];\n    }\n\n    return '';\n  };\n\n  return /*#__PURE__*/React.createElement(Paper, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(EditorToolbar, {\n    editorState: editorState,\n    onToggle: handleToolbarToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-label\": \"Editor Container\",\n    className: classes.editorContainer,\n    role: \"button\",\n    onClick: handleContainerClick,\n    tabIndex: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    blockRenderMap: blockRenderMap,\n    blockStyleFn: blockStyleFn,\n    editorState: editorState,\n    handleKeyCommand: handleKeyCommand,\n    keyBindingFn: mapKeyToEditorCommand,\n    onChange: handleEditorChange,\n    placeholder: placeholder,\n    ref: editorRef,\n    spellCheck: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  })));\n}\n\nRichEditor.propTypes = {\n  className: PropTypes.string,\n  placeholder: PropTypes.string\n};\nexport default RichEditor;","map":{"version":3,"sources":["/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/components/RichEditor/index.js"],"names":["React","useState","useRef","PropTypes","clsx","Editor","EditorState","RichUtils","Modifier","getDefaultKeyBinding","makeStyles","Paper","Divider","EditorToolbar","blockRenderMap","useStyles","theme","root","editorContainer","padding","spacing","minHeight","outline","typography","body2","display","body1","h1","h2","h3","h4","h5","h6","subtitle1","marginLeft","backgroundColor","fontFamily","fontSize","textAlignLeft","textAlign","textAlignCenter","textAlignRight","textAlignJustify","capitalize","string","charAt","toUpperCase","slice","RichEditor","placeholder","className","rest","classes","editorRef","editorState","setEditorState","createEmpty","handleContainerClick","current","focus","handleToolbarToggle","type","value","includes","newContentState","setBlockData","getCurrentContent","getSelection","newEditorState","push","toggleBlockType","toggleInlineStyle","handleEditorChange","newState","handleKeyCommand","command","mapKeyToEditorCommand","event","keyCode","onTab","blockStyleFn","contentBlock","getData","get","propTypes"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  Modifier,\n  getDefaultKeyBinding\n} from 'draft-js';\nimport { makeStyles } from '@material-ui/styles';\nimport { Paper, Divider } from '@material-ui/core';\nimport EditorToolbar from './EditorToolbar';\nimport { blockRenderMap } from './block';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  editorContainer: {\n    padding: theme.spacing(2),\n    minHeight: 400,\n    '&:focus': {\n      outline: 'none'\n    },\n    '& .public-DraftEditorPlaceholder-root': {\n      ...theme.typography.body2\n    },\n    '& .public-DraftEditorPlaceholder-hasFocus': {\n      display: 'none'\n    },\n    '& .public-DraftEditor-content': {\n      ...theme.typography.body1,\n      '& h1': {\n        ...theme.typography.h1\n      },\n      '& h2': {\n        ...theme.typography.h2\n      },\n      '& h3': {\n        ...theme.typography.h3\n      },\n      '& h4': {\n        ...theme.typography.h4\n      },\n      '& h5': {\n        ...theme.typography.h5\n      },\n      '& h6': {\n        ...theme.typography.h6\n      },\n      '& blockquote': {\n        ...theme.typography.subtitle1\n      },\n      '& ul': {\n        ...theme.typography.body1,\n        marginLeft: theme.spacing(4)\n      },\n      '& ol': {\n        ...theme.typography.body1,\n        marginLeft: theme.spacing(4)\n      },\n      '& pre': {\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n        fontSize: 16,\n        padding: 2\n      }\n    }\n  },\n  textAlignLeft: {\n    textAlign: 'left'\n  },\n  textAlignCenter: {\n    textAlign: 'center'\n  },\n  textAlignRight: {\n    textAlign: 'right'\n  },\n  textAlignJustify: {\n    textAlign: 'justify'\n  }\n}));\n\nconst capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1);\n\nfunction RichEditor({ placeholder, className, ...rest }) {\n  const classes = useStyles();\n  const editorRef = useRef(null);\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const handleContainerClick = () => {\n    editorRef.current.focus();\n  };\n\n  const handleToolbarToggle = (type, value) => {\n    if (type === 'blockType') {\n      if (['left', 'center', 'right', 'justify'].includes(value)) {\n        const newContentState = Modifier.setBlockData(\n          editorState.getCurrentContent(),\n          editorState.getSelection(),\n          { 'text-align': value }\n        );\n\n        const newEditorState = EditorState.push(\n          editorState,\n          newContentState,\n          'change-block-data'\n        );\n\n        setEditorState(newEditorState);\n        return;\n      }\n\n      setEditorState(RichUtils.toggleBlockType(editorState, value));\n    } else {\n      setEditorState(RichUtils.toggleInlineStyle(editorState, value));\n    }\n  };\n\n  const handleEditorChange = (newState) => {\n    setEditorState(newState);\n  };\n\n  const handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      handleEditorChange(newState);\n      return true;\n    }\n\n    return false;\n  };\n\n  const mapKeyToEditorCommand = (event) => {\n    if (event.keyCode === 9) {\n      const newEditorState = RichUtils.onTab(event, editorState, 4);\n\n      if (newEditorState !== editorState) {\n        handleEditorChange(newEditorState);\n      }\n\n      return;\n    }\n\n    return getDefaultKeyBinding(event);\n  };\n\n  const blockStyleFn = (contentBlock) => {\n    const textAlign = contentBlock.getData().get('text-align');\n\n    if (textAlign) {\n      return classes[`textAlign${capitalize(textAlign)}`];\n    }\n\n    return '';\n  };\n\n  return (\n    <Paper\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <EditorToolbar\n        editorState={editorState}\n        onToggle={handleToolbarToggle}\n      />\n      <Divider />\n      <div\n        aria-label=\"Editor Container\"\n        className={classes.editorContainer}\n        role=\"button\"\n        onClick={handleContainerClick}\n        tabIndex={0}\n      >\n        <Editor\n          blockRenderMap={blockRenderMap}\n          blockStyleFn={blockStyleFn}\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          keyBindingFn={mapKeyToEditorCommand}\n          onChange={handleEditorChange}\n          placeholder={placeholder}\n          ref={editorRef}\n          spellCheck\n        />\n      </div>\n    </Paper>\n  );\n}\n\nRichEditor.propTypes = {\n  className: PropTypes.string,\n  placeholder: PropTypes.string\n};\n\nexport default RichEditor;\n"]},"metadata":{},"sourceType":"module"}