{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // import { createLogger } from 'redux-logger';\n\nimport rootReducer from 'src/reducers'; // const loggerMiddleware = createLogger();\n\nexport default function configureStore(preloadedState = {}) {\n  const middlewares = [thunkMiddleware]; // loggerMiddleware\n\n  const middlewareEnhancer = composeWithDevTools(applyMiddleware(...middlewares));\n  const enhancers = [middlewareEnhancer];\n  const composedEnhancers = compose(...enhancers);\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n  return store;\n}","map":{"version":3,"sources":["/Users/phuongle/Documents/Internship/Klavins Lab/project-dashboard/src/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","thunkMiddleware","composeWithDevTools","rootReducer","configureStore","preloadedState","middlewares","middlewareEnhancer","enhancers","composedEnhancers","store"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,cAAxB,C,CAEA;;AAEA,eAAe,SAASC,cAAT,CAAwBC,cAAc,GAAG,EAAzC,EAA6C;AAC1D,QAAMC,WAAW,GAAG,CAACL,eAAD,CAApB,CAD0D,CACnB;;AACvC,QAAMM,kBAAkB,GAAGL,mBAAmB,CAC5CJ,eAAe,CAAC,GAAGQ,WAAJ,CAD6B,CAA9C;AAIA,QAAME,SAAS,GAAG,CAACD,kBAAD,CAAlB;AACA,QAAME,iBAAiB,GAAGT,OAAO,CAAC,GAAGQ,SAAJ,CAAjC;AAEA,QAAME,KAAK,GAAGX,WAAW,CAACI,WAAD,EAAcE,cAAd,EAA8BI,iBAA9B,CAAzB;AAEA,SAAOC,KAAP;AACD","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// import { createLogger } from 'redux-logger';\nimport rootReducer from 'src/reducers';\n\n// const loggerMiddleware = createLogger();\n\nexport default function configureStore(preloadedState = {}) {\n  const middlewares = [thunkMiddleware]; // loggerMiddleware\n  const middlewareEnhancer = composeWithDevTools(\n    applyMiddleware(...middlewares)\n  );\n\n  const enhancers = [middlewareEnhancer];\n  const composedEnhancers = compose(...enhancers);\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}